{"version":3,"names":["webkitGetAsEntryApi","fallbackApi","getDroppedFiles","dataTransfer","_temp","logDropError","accumulator","file","push"],"sources":["index.js"],"sourcesContent":["import webkitGetAsEntryApi from './utils/webkitGetAsEntryApi/index.js'\nimport fallbackApi from './utils/fallbackApi.js'\n\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param {DataTransfer} dataTransfer\n * @param {Function} logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\nexport default async function getDroppedFiles (dataTransfer, { logDropError = () => {} } = {}) {\n  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n  try {\n    const accumulator = []\n    for await (const file of webkitGetAsEntryApi(dataTransfer, logDropError)) {\n      accumulator.push(file)\n    }\n    return accumulator\n  // Otherwise just return all first-order files\n  } catch {\n    return fallbackApi(dataTransfer)\n  }\n}\n"],"mappings":"AAAA,OAAOA,mBAAmB,MAAM,sCAAsC;AACtE,OAAOC,WAAW,MAAM,wBAAwB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAeC,eAAeA,CAAEC,YAAY,EAAAC,KAAA,EAAoC;EAAA,IAAlC;IAAEC,YAAY,GAAGA,CAAA,KAAM,CAAC;EAAE,CAAC,GAAAD,KAAA,cAAG,CAAC,CAAC,GAAAA,KAAA;EAC3F;EACA,IAAI;IACF,MAAME,WAAW,GAAG,EAAE;IACtB,WAAW,MAAMC,IAAI,IAAIP,mBAAmB,CAACG,YAAY,EAAEE,YAAY,CAAC,EAAE;MACxEC,WAAW,CAACE,IAAI,CAACD,IAAI,CAAC;IACxB;IACA,OAAOD,WAAW;IACpB;EACA,CAAC,CAAC,MAAM;IACN,OAAOL,WAAW,CAACE,YAAY,CAAC;EAClC;AACF"}