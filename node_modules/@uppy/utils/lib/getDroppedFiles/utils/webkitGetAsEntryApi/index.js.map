{"version":3,"names":["getFilesAndDirectoriesFromDirectory","getAsFileSystemHandleFromEntry","entry","logDropError","kind","isFile","isDirectory","undefined","name","getFile","Promise","resolve","reject","file","values","directoryReader","createReader","entries","onSuccess","dirEntries","map","createPromiseToAddFileOrParseDirectory","relativePath","lastResortFile","getNextRelativePath","handle","e","getFilesFromDataTransfer","dataTransfer","fileSystemHandles","all","Array","from","items","item","_fileSystemHandle","fileSystemHandle","getAsEntry","webkitGetAsEntry","getAsFile","err"],"sources":["index.js"],"sourcesContent":["import getFilesAndDirectoriesFromDirectory from './getFilesAndDirectoriesFromDirectory.js'\n\n/**\n * Polyfill for the new (experimental) getAsFileSystemHandle API (using the popular webkitGetAsEntry behind the scenes)\n * so that we can switch to the getAsFileSystemHandle API once it (hopefully) becomes standard\n */\nfunction getAsFileSystemHandleFromEntry (entry, logDropError) {\n  if (entry == null) return entry\n  return {\n    // eslint-disable-next-line no-nested-ternary\n    kind: entry.isFile ? 'file' : entry.isDirectory ? 'directory' : undefined,\n    name: entry.name,\n    getFile () {\n      return new Promise((resolve, reject) => entry.file(resolve, reject))\n    },\n    async* values () {\n      // If the file is a directory.\n      const directoryReader = entry.createReader()\n      const entries = await new Promise(resolve => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: (dirEntries) => resolve(dirEntries.map(file => getAsFileSystemHandleFromEntry(file, logDropError))),\n        })\n      })\n      yield* entries\n    },\n  }\n}\n\nasync function* createPromiseToAddFileOrParseDirectory (entry, relativePath, lastResortFile = undefined) {\n  const getNextRelativePath = () => `${relativePath}/${entry.name}`\n\n  // For each dropped item, - make sure it's a file/directory, and start deepening in!\n  if (entry.kind === 'file') {\n    const file = await entry.getFile()\n    if (file != null) {\n      file.relativePath = relativePath ? getNextRelativePath() : null\n      yield file\n    } else if (lastResortFile != null) yield lastResortFile\n  } else if (entry.kind === 'directory') {\n    for await (const handle of entry.values()) {\n      // Recurse on the directory, appending the dir name to the relative path\n      yield* createPromiseToAddFileOrParseDirectory(handle, relativePath ? getNextRelativePath() : entry.name)\n    }\n  } else if (lastResortFile != null) yield lastResortFile\n}\n\n/**\n * Load all files from data transfer, and recursively read any directories.\n * Note that IE is not supported for drag-drop, because IE doesn't support Data Transfers\n *\n * @param {DataTransfer} dataTransfer\n * @param {*} logDropError on error\n */\nexport default async function* getFilesFromDataTransfer (dataTransfer, logDropError) {\n  // Retrieving the dropped items must happen synchronously\n  // otherwise only the first item gets treated and the other ones are garbage collected.\n  // https://github.com/transloadit/uppy/pull/3998\n  const fileSystemHandles = await Promise.all(Array.from(dataTransfer.items, async item => {\n    let fileSystemHandle\n\n    // TODO enable getAsFileSystemHandle API once we can get it working with subdirectories\n    // IMPORTANT: Need to check isSecureContext *before* calling getAsFileSystemHandle\n    // or else Chrome will crash when running in HTTP: https://github.com/transloadit/uppy/issues/4133\n    // if (window.isSecureContext && item.getAsFileSystemHandle != null) entry = await item.getAsFileSystemHandle()\n\n    // `webkitGetAsEntry` exists in all popular browsers (including non-WebKit browsers),\n    // however it may be renamed to getAsEntry() in the future, so you should code defensively, looking for both.\n    // from https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry\n    const getAsEntry = () => (typeof item.getAsEntry === 'function' ? item.getAsEntry() : item.webkitGetAsEntry())\n    // eslint-disable-next-line prefer-const\n    fileSystemHandle ??= getAsFileSystemHandleFromEntry(getAsEntry(), logDropError)\n\n    return {\n      fileSystemHandle,\n      lastResortFile: item.getAsFile(), // can be used as a fallback in case other methods fail\n    }\n  }))\n\n  for (const { lastResortFile, fileSystemHandle } of fileSystemHandles) {\n    // fileSystemHandle and lastResortFile can be null when we drop an url.\n    if (fileSystemHandle != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(fileSystemHandle, '', lastResortFile)\n      } catch (err) {\n        // Example: If dropping a symbolic link, Chromium will throw:\n        // \"DOMException: A requested file or directory could not be found at the time an operation was processed.\",\n        // So we will use lastResortFile instead. See https://github.com/transloadit/uppy/issues/3505.\n        if (lastResortFile != null) {\n          yield lastResortFile\n        } else {\n          logDropError(err)\n        }\n      }\n    } else if (lastResortFile != null) yield lastResortFile\n  }\n}\n"],"mappings":"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"}