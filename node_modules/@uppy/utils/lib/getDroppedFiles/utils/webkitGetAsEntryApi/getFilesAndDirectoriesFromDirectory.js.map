{"version":3,"names":["getFilesAndDirectoriesFromDirectory","directoryReader","oldEntries","logDropError","_ref","onSuccess","readEntries","entries","newEntries","length","queueMicrotask","error"],"sources":["getFilesAndDirectoriesFromDirectory.js"],"sourcesContent":["/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nexport default function getFilesAndDirectoriesFromDirectory (directoryReader, oldEntries, logDropError, { onSuccess }) {\n  directoryReader.readEntries(\n    (entries) => {\n      const newEntries = [...oldEntries, ...entries]\n      // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n      // must be called until it calls the onSuccess with an empty array.\n      if (entries.length) {\n        queueMicrotask(() => {\n          getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, { onSuccess })\n        })\n      // Done iterating this particular directory\n      } else {\n        onSuccess(newEntries)\n      }\n    },\n    // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n    (error) => {\n      logDropError(error)\n      onSuccess(oldEntries)\n    },\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,mCAAmCA,CAAEC,eAAe,EAAEC,UAAU,EAAEC,YAAY,EAAAC,IAAA,EAAiB;EAAA,IAAf;IAAEC;EAAU,CAAC,GAAAD,IAAA;EACnHH,eAAe,CAACK,WAAW,CACxBC,OAAO,IAAK;IACX,MAAMC,UAAU,GAAG,CAAC,GAAGN,UAAU,EAAE,GAAGK,OAAO,CAAC;IAC9C;IACA;IACA,IAAIA,OAAO,CAACE,MAAM,EAAE;MAClBC,cAAc,CAAC,MAAM;QACnBV,mCAAmC,CAACC,eAAe,EAAEO,UAAU,EAAEL,YAAY,EAAE;UAAEE;QAAU,CAAC,CAAC;MAC/F,CAAC,CAAC;MACJ;IACA,CAAC,MAAM;MACLA,SAAS,CAACG,UAAU,CAAC;IACvB;EACF,CAAC;EACD;EACCG,KAAK,IAAK;IACTR,YAAY,CAACQ,KAAK,CAAC;IACnBN,SAAS,CAACH,UAAU,CAAC;EACvB,CACF,CAAC;AACH"}