{"version":3,"names":["BasePlugin","tus","Provider","RequestClient","EventManager","NetworkError","isNetworkError","RateLimitedQueue","hasProperty","filterNonFailedFiles","filterFilesToEmitUploadStarted","getFingerprint","packageJson","tusDefaultOptions","endpoint","uploadUrl","metadata","uploadSize","onProgress","onChunkComplete","onSuccess","onError","overridePatchMethod","headers","addRequestId","chunkSize","Infinity","retryDelays","parallelUploads","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","_retryDelayIterator","_classPrivateFieldLooseKey","_uploadLocalFile","_getCompanionClientArgs","_uploadFiles","_handleUpload","Tus","constructor","uppy","opts","_this$opts$rateLimite","_this$opts$retryDelay","Object","defineProperty","value","_uploadFiles2","_getCompanionClientArgs2","_uploadLocalFile2","writable","fileIDs","length","log","limit","filesToUpload","getFilesByIds","_classPrivateFieldLooseBase","type","id","title","defaultOptions","useFastRemoteRetry","withCredentials","allowedMetaFields","undefined","Error","requests","rateLimitedQueue","values","uploaders","create","uploaderEvents","handleResetProgress","bind","files","getState","keys","forEach","fileID","tusState","setState","resetUploaderReferences","uploader","abort","remove","onReceiveUploadUrl","file","uploadURL","currentFile","getFile","setFileState","install","capabilities","resumableUploads","addUploader","on","uninstall","removeUploader","_this","Promise","resolve","reject","queuedRequest","qRequest","upload","uploadOptions","fingerprint","onBeforeRequest","req","xhr","getUnderlyingObject","userProvidedPromise","shouldBeRequeued","done","p","res","run","isPaused","all","err","_queuedRequest","originalRequest","emit","bytesUploaded","bytesTotal","url","uploadResp","name","defaultOnShouldRetry","_err$originalResponse","status","originalResponse","getStatus","_classPrivateFieldLoo","next","rateLimit","navigator","onLine","pause","window","addEventListener","resume","once","fn","onShouldRetry","_len","arguments","args","Array","_key","copyProp","obj","srcProp","destProp","meta","isArray","item","Upload","data","eventManager","start","findPreviousUploads","then","previousUploads","previousUpload","creationTime","resumeFromPreviousUpload","onFileRemove","targetFileID","onPause","onPauseAll","onCancelAll","_temp","reason","onResumeAll","error","catch","assign","remote","body","protocol","size","filesFiltered","filesToEmit","allSettled","map","i","current","total","isRemote","Client","providerOptions","provider","getQueue","client","controller","AbortController","removedHandler","removedFile","uploadPromise","uploadRemoteFile","signal","wrapSyncFunction","off","priority","VERSION","version"],"sources":["index.js"],"sourcesContent":["import BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport * as tus from 'tus-js-client'\nimport { Provider, RequestClient } from '@uppy/companion-client'\nimport EventManager from '@uppy/utils/lib/EventManager'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport isNetworkError from '@uppy/utils/lib/isNetworkError'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport hasProperty from '@uppy/utils/lib/hasProperty'\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters'\nimport getFingerprint from './getFingerprint.js'\n\nimport packageJson from '../package.json'\n\n/** @typedef {import('..').TusOptions} TusOptions */\n/** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */\n/** @typedef {import('@uppy/core').Uppy} Uppy */\n/** @typedef {import('@uppy/core').UppyFile} UppyFile */\n/** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */\n\n/**\n * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n * excepted we removed 'fingerprint' key to avoid adding more dependencies\n *\n * @type {RawTusOptions}\n */\nconst tusDefaultOptions = {\n  endpoint: '',\n\n  uploadUrl: null,\n  metadata: {},\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n\n  chunkSize: Infinity,\n  retryDelays: [100, 1000, 3000, 5000],\n  parallelUploads: 1,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n}\n\n/**\n * Tus resumable file uploader\n */\nexport default class Tus extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #retryDelayIterator\n\n  /**\n   * @param {Uppy} uppy\n   * @param {TusOptions} opts\n   */\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      useFastRemoteRetry: true,\n      limit: 20,\n      retryDelays: tusDefaultOptions.retryDelays,\n      withCredentials: false,\n    }\n\n    // merge default options with the ones set by user\n    /** @type {import(\"..\").TusOptions} */\n    this.opts = { ...defaultOptions, ...opts }\n\n    if (opts?.allowedMetaFields === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.')\n    }\n\n    if ('autoRetry' in opts) {\n      throw new Error('The `autoRetry` option was deprecated and has been removed.')\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = this.opts.rateLimitedQueue ?? new RateLimitedQueue(this.opts.limit)\n    this.#retryDelayIterator = this.opts.retryDelays?.values()\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n\n    this.handleResetProgress = this.handleResetProgress.bind(this)\n  }\n\n  handleResetProgress () {\n    const files = { ...this.uppy.getState().files }\n    Object.keys(files).forEach((fileID) => {\n      // Only clone the file object if it has a Tus `uploadUrl` attached.\n      if (files[fileID].tus && files[fileID].tus.uploadUrl) {\n        const tusState = { ...files[fileID].tus }\n        delete tusState.uploadUrl\n        files[fileID] = { ...files[fileID], tus: tusState }\n      }\n    })\n\n    this.uppy.setState({ files })\n  }\n\n  /**\n   * Clean up all references for a file's upload: the tus.Upload instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * @param {string} fileID\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      const uploader = this.uploaders[fileID]\n\n      uploader.abort()\n\n      if (opts.abort) {\n        uploader.abort(true)\n      }\n\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n  }\n\n  /**\n   * Create a new Tus upload.\n   *\n   * A lot can happen during an upload, so this is quite hard to follow!\n   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.\n   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.\n   *   When an upload starts, we store the tus.Upload instance, and an EventManager instance that manages the event listeners\n   *   for pausing, cancellation, removal, etc.\n   * - While the upload is in progress, it may be paused or cancelled.\n   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is\n   *   maintained.\n   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`\n   *   instance is aborted and discarded, the EventManager instance is destroyed (removing all listeners).\n   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from\n   *   bypassing the limit.\n   * - After completing an upload, the tus.Upload and EventManager instances are cleaned up, and the upload is marked as done\n   *   in the `this.requests` queue.\n   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is\n   *   rejected.\n   *\n   * When working on this function, keep in mind:\n   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventManager instances need to be cleaned\n   *    up using this.resetUploaderReferences().\n   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using\n   *    `queuedRequest.abort()`.\n   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using\n   *    `queuedRequest.done()`.\n   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable\n   *    must be updated so the other uses of it are valid.\n   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking\n   *    up a spot in the queue.\n   *\n   * @param {UppyFile} file for use with upload\n   * @returns {Promise<void>}\n   */\n  #uploadLocalFile (file) {\n    this.resetUploaderReferences(file.id)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      let queuedRequest\n      let qRequest\n      let upload\n\n      const opts = {\n        ...this.opts,\n        ...(file.tus || {}),\n      }\n\n      if (typeof opts.headers === 'function') {\n        opts.headers = opts.headers(file)\n      }\n\n      /** @type {RawTusOptions} */\n      const uploadOptions = {\n        ...tusDefaultOptions,\n        ...opts,\n      }\n\n      // We override tus fingerprint to uppyâ€™s `file.id`, since the `file.id`\n      // now also includes `relativePath` for files added from folders.\n      // This means you can add 2 identical files, if one is in folder a,\n      // the other in folder b.\n      uploadOptions.fingerprint = getFingerprint(file)\n\n      uploadOptions.onBeforeRequest = (req) => {\n        const xhr = req.getUnderlyingObject()\n        xhr.withCredentials = !!opts.withCredentials\n\n        let userProvidedPromise\n        if (typeof opts.onBeforeRequest === 'function') {\n          userProvidedPromise = opts.onBeforeRequest(req, file)\n        }\n\n        if (hasProperty(queuedRequest, 'shouldBeRequeued')) {\n          if (!queuedRequest.shouldBeRequeued) return Promise.reject()\n          let done\n          const p = new Promise((res) => { // eslint-disable-line promise/param-names\n            done = res\n          })\n          queuedRequest = this.requests.run(() => {\n            if (file.isPaused) {\n              queuedRequest.abort()\n            }\n            done()\n            return () => {}\n          })\n          // If the request has been requeued because it was rate limited by the\n          // remote server, we want to wait for `RateLimitedQueue` to dispatch\n          // the re-try request.\n          // Therefore we create a promise that the queue will resolve when\n          // enough time has elapsed to expect not to be rate-limited again.\n          // This means we can hold the Tus retry here with a `Promise.all`,\n          // together with the returned value of the user provided\n          // `onBeforeRequest` option callback (in case it returns a promise).\n          return Promise.all([p, userProvidedPromise])\n        }\n        return userProvidedPromise\n      }\n\n      uploadOptions.onError = (err) => {\n        this.uppy.log(err)\n\n        const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null\n        if (isNetworkError(xhr)) {\n          // eslint-disable-next-line no-param-reassign\n          err = new NetworkError(err, xhr)\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest?.abort()\n\n        this.uppy.emit('upload-error', file, err)\n        if (typeof opts.onError === 'function') {\n          opts.onError(err)\n        }\n        reject(err)\n      }\n\n      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        if (typeof opts.onProgress === 'function') {\n          opts.onProgress(bytesUploaded, bytesTotal)\n        }\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      uploadOptions.onSuccess = () => {\n        const uploadResp = {\n          uploadURL: upload.url,\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        this.uppy.emit('upload-success', file, uploadResp)\n\n        if (upload.url) {\n          this.uppy.log(`Download ${upload.file.name} from ${upload.url}`)\n        }\n        if (typeof opts.onSuccess === 'function') {\n          opts.onSuccess()\n        }\n\n        resolve(upload)\n      }\n\n      const defaultOnShouldRetry = (err) => {\n        const status = err?.originalResponse?.getStatus()\n\n        if (status === 429) {\n          // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n          if (!this.requests.isPaused) {\n            const next = this.#retryDelayIterator?.next()\n            if (next == null || next.done) {\n              return false\n            }\n            this.requests.rateLimit(next.value)\n          }\n        } else if (status > 400 && status < 500 && status !== 409 && status !== 423) {\n          // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n          // HTTP 409 Conflict (happens if the Upload-Offset header does not match the one on the server)\n          // HTTP 423 Locked (happens when a paused download is resumed too quickly)\n          return false\n        } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n          // The navigator is offline, let's wait for it to come back online.\n          if (!this.requests.isPaused) {\n            this.requests.pause()\n            window.addEventListener('online', () => {\n              this.requests.resume()\n            }, { once: true })\n          }\n        }\n        queuedRequest.abort()\n        queuedRequest = {\n          shouldBeRequeued: true,\n          abort () {\n            this.shouldBeRequeued = false\n          },\n          done () {\n            throw new Error('Cannot mark a queued request as done: this indicates a bug')\n          },\n          fn () {\n            throw new Error('Cannot run a queued request: this indicates a bug')\n          },\n        }\n        return true\n      }\n\n      if (opts.onShouldRetry != null) {\n        uploadOptions.onShouldRetry = (...args) => opts.onShouldRetry(...args, defaultOnShouldRetry)\n      } else {\n        uploadOptions.onShouldRetry = defaultOnShouldRetry\n      }\n\n      const copyProp = (obj, srcProp, destProp) => {\n        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {\n          // eslint-disable-next-line no-param-reassign\n          obj[destProp] = obj[srcProp]\n        }\n      }\n\n      /** @type {Record<string, string>} */\n      const meta = {}\n      const allowedMetaFields = Array.isArray(opts.allowedMetaFields)\n        ? opts.allowedMetaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n      allowedMetaFields.forEach((item) => {\n        meta[item] = file.meta[item]\n      })\n\n      // tusd uses metadata fields 'filetype' and 'filename'\n      copyProp(meta, 'type', 'filetype')\n      copyProp(meta, 'name', 'filename')\n\n      uploadOptions.metadata = meta\n\n      upload = new tus.Upload(file.data, uploadOptions)\n      this.uploaders[file.id] = upload\n      const eventManager = new EventManager(this.uppy)\n      this.uploaderEvents[file.id] = eventManager\n\n      // eslint-disable-next-line prefer-const\n      qRequest = () => {\n        if (!file.isPaused) {\n          upload.start()\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      }\n\n      upload.findPreviousUploads().then((previousUploads) => {\n        const previousUpload = previousUploads[0]\n        if (previousUpload) {\n          this.uppy.log(`[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`)\n          upload.resumeFromPreviousUpload(previousUpload)\n        }\n      })\n\n      queuedRequest = this.requests.run(qRequest)\n\n      eventManager.onFileRemove(file.id, (targetFileID) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      eventManager.onPause(file.id, (isPaused) => {\n        queuedRequest.abort()\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          upload.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest = this.requests.run(qRequest)\n        }\n      })\n\n      eventManager.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.abort()\n      })\n\n      eventManager.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          queuedRequest.abort()\n          this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      eventManager.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(qRequest)\n      })\n    }).catch((err) => {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    })\n  }\n\n  /**\n   * Store the uploadUrl on the file options, so that when Golden Retriever\n   * restores state, we will continue uploading to the correct URL.\n   *\n   * @param {UppyFile} file\n   * @param {string} uploadURL\n   */\n  onReceiveUploadUrl (file, uploadURL) {\n    const currentFile = this.uppy.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      this.uppy.log('[Tus] Storing upload url')\n      this.uppy.setFileState(currentFile.id, {\n        tus: { ...currentFile.tus, uploadUrl: uploadURL },\n      })\n    }\n  }\n\n  #getCompanionClientArgs (file) {\n    const opts = { ...this.opts }\n\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    return {\n      ...file.remote.body,\n      endpoint: opts.endpoint,\n      uploadUrl: opts.uploadUrl,\n      protocol: 'tus',\n      size: file.data.size,\n      headers: opts.headers,\n      metadata: file.meta,\n    }\n  }\n\n  /**\n   * @param {(UppyFile | FailedUppyFile)[]} files\n   */\n  async #uploadFiles (files) {\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n    this.uppy.emit('upload-start', filesToEmit)\n\n    await Promise.allSettled(filesFiltered.map((file, i) => {\n      const current = i + 1\n      const total = files.length\n\n      if (file.isRemote) {\n        // INFO: the url plugin needs to use RequestClient,\n        // while others use Provider\n        const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n        const getQueue = () => this.requests\n        const client = new Client(this.uppy, file.remote.providerOptions, getQueue)\n        const controller = new AbortController()\n\n        const removedHandler = (removedFile) => {\n          if (removedFile.id === file.id) controller.abort()\n        }\n        this.uppy.on('file-removed', removedHandler)\n\n        const uploadPromise = client.uploadRemoteFile(\n          file,\n          this.#getCompanionClientArgs(file),\n          { signal: controller.signal },\n        )\n\n        this.requests.wrapSyncFunction(() => {\n          this.uppy.off('file-removed', removedHandler)\n        }, { priority: -1 })()\n\n        return uploadPromise\n      }\n\n      return this.#uploadLocalFile(file, current, total)\n    }))\n  }\n\n  /**\n   * @param {string[]} fileIDs\n   */\n  #handleUpload = async (fileIDs) => {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[Tus] No files to upload')\n      return\n    }\n\n    if (this.opts.limit === 0) {\n      this.uppy.log(\n        '[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0',\n        'warning',\n      )\n    }\n\n    this.uppy.log('[Tus] Uploading...')\n    const filesToUpload = this.uppy.getFilesByIds(fileIDs)\n\n    await this.#uploadFiles(filesToUpload)\n  }\n\n  install () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: true },\n    })\n    this.uppy.addUploader(this.#handleUpload)\n\n    this.uppy.on('reset-progress', this.handleResetProgress)\n  }\n\n  uninstall () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: false },\n    })\n    this.uppy.removeUploader(this.#handleUpload)\n  }\n}\n"],"mappings":"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"}